version: 2
dependencies:
  cache_directories:
    - "vendor/apt"
    - "vendor/apt/archives"
jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - restore_cache:
          keys:
            - os-deps-v2-{{ arch }}-{{ .Branch }}
      - run:
          name: Install Os dependencies
          command: ./build/x86_64/linux_macos/osDependencies.sh
          timeout: 2m
      - save_cache:
          key: os-deps-v2-{{ arch }}-{{ .Branch }}
          paths:
            - "vendor/apt"
            - "vendor/apt/archives"
      - restore_cache:
          keys:
            - make-v2-{{ arch }}-{{ .Branch }}
      - run:
          name: Build and install make via script
          command: ./build/x86_64/linux_macos/installMake.sh
          timeout: 1m
      - save_cache:
          key: make-v2-{{ arch }}-{{ .Branch }}
          paths:
            - /make-*/
            - /usr/bin/make
            - /usr/local/bin/make
            - /usr/share/man/man1/make.1.gz
      - restore_cache:
          keys:
            - llvm-v2-{{ arch }}-{{ .Branch }}
      - run:
          name: Install llvm via a script
          command: ./build/x86_64/linux_macos/installLLVM.sh
          timeout: 1m
      - save_cache:
          key: llvm-v2-{{ arch }}-{{ .Branch }}
          paths:
            - /opt/clang+llvm-7.0*
            - /usr/share/doc/
            - /usr/share/lintian/overrides/
      - restore_cache:
          keys:
            - ruby-v2-{{ arch }}-{{ .Branch }}
      - run:
          name: Install ruby via a script
          command: ./build/x86_64/linux_macos/installRuby.sh
          timeout: 1m
      - save_cache:
          key: ruby-v2-{{ arch }}-{{ .Branch }}
          paths:
            - /usr/local/rvm/
            - /usr/lib/ruby/
            - /var/lib/dpkg/info/*ruby*
            - /usr/bin/*ruby*
            - /usr/share/doc/*ruby*
            - /usr/share/man/man1/*ruby*
            - /usr/lib/x86_64-linux-gnu/*ruby*
      - run:
          name: Download and install Java 8 SDK
          command: ./build/x86_64/linux_macos/installJDK.sh
          timeout: 2m
      - run:
          name: Define Environment Variables and update JAVA_HOME and PATH at Runtime
          command: |
            echo "Current directory: ${PWD}"
            echo 'export DOCKER_USER_NAME=neomatrix369'                           >> ${BASH_ENV}
            echo 'export JAVA_VERSION=jdk1.8.0'                                   >> ${BASH_ENV}
            echo 'export JAVA_HOME=/usr/lib/jvm/jdk1.8.0/'                        >> ${BASH_ENV}
            echo 'export JAVA_OPTS="${MAX_HEAP_SIZE_FLAG:-} -XX:+HeapDumpOnOutOfMemoryError -XX:+ShowMessageBoxOnError -XX:ErrorFile=${BASEDIR}/hs_err_pid%p.log -XX:HeapDumpPath=${BASEDIR}/java-heap-dump-%p ${JAVA_OPTS:-}"' >> ${BASH_ENV}
            echo 'export PATH=${JAVA_HOME}/bin:${PATH}'                           >> ${BASH_ENV}
            echo 'export OS_PLATFORM="x86_64-linux-gnu-ubuntu-16.04"'             >> ${BASH_ENV}
            echo 'export LLVM_VERSION=${1:-6.0}'                                  >> ${BASH_ENV}
            echo 'export PATH="/opt/clang+llvm-${LLVM_VERSION}.0-${OS_PLATFORM}/bin/:${PATH}"' >> ${BASH_ENV}
            echo 'export BASEDIR=${PWD}'                                          >> ${BASH_ENV}
            echo 'export SCRIPTS_LIB_DIR=${BASEDIR}/build/x86_64/linux_macos/lib' >> ${BASH_ENV}
            echo 'export MX=${BASEDIR}/mx/mx'                                     >> ${BASH_ENV}
            echo 'export JDK_GRAAL_FOLDER_NAME=jdk8-with-graal'                   >> ${BASH_ENV}
            echo 'export GRAAL_JVMCI_8_TAG=master'                                >> ${BASH_ENV}
            echo 'export BUILD_ARTIFACTS_DIR=${BASEDIR}/${JDK_GRAAL_FOLDER_NAME}' >> ${BASH_ENV}
            echo 'export RUN_TESTS="true"'                                        >> ${BASH_ENV}
            echo 'export GRAALVM_SUITE_RUNTIMES="/substratevm,/tools,sulong,/graal-nodejs,truffleruby,graalpython"' >> ${BASH_ENV}
            echo 'export FASTR_RELEASE="true"'                                    >> ${BASH_ENV}
            echo 'export LANG="en_US.UTF-8"'                                      >> ${BASH_ENV}
            echo 'export LC_ALL="en_US.UTF-8"'                                    >> ${BASH_ENV}
            echo 'export LC_CTYPE="en_US.UTF-8"'                                  >> ${BASH_ENV}
            source ${BASH_ENV}
          when: always
      - run:
          name: Run local build
          command: ./build/x86_64/linux_macos/local-build.sh
          timeout: 20m
          no_output_timeout: 15m
      - run:
          name: Archiving artifacts
          command: |
            ./build/x86_64/linux_macos/lib/archivingArtifacts.sh ${BASEDIR} ${MX} ${JDK_GRAAL_FOLDER_NAME} ${BUILD_ARTIFACTS_DIR}
          timeout: 3m
          no_output_timeout: 2m
      - run:
          name: Collecting and archiving logs (debug and error logs)
          command: |
            ./build/x86_64/linux_macos/lib/archivingLogs.sh ${BASEDIR}
          timeout: 3m
          no_output_timeout: 2m
          when: always
      - store_artifacts:
          name: Uploading logs
          path: logs/
      - store_artifacts:
          name: Uploading artifacts in jdk8-with-graal-local
          path: jdk8-with-graal-local/